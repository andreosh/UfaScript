1) Как сделать OneScript Объектно ориентированным.
2) Описание объектов в UfaScript


1) Как сделать OneScript Объектно ориентированным.
   ====================================================

    Когда-то, еще в 90-ых года, вынуждено перейдя с Delphi на FoxPro 2.6 (работает в консоле под DOS), 
в связи необходимостью по работе переписывать большой чужой проект для компании, я решил сделать FoxPro 2.6 
объектно ориентированным. Для того, чтоб реализовать псевдообъектно ориентированность я использовал 
массивы строк, в которых записывал методы в виде строки. Это выглядело примерно так 
Массив[4] = "myfunc()", а при вызове данного метода так &Массив[4]. Теперь, занявшись языком OneScript, 
я понял, что могу повторить этот фокус. Как потом оказалось, повторение получилось более успешным, так как 
мой метод создания объектов в OneScript позволяет делать приватные свойства и приватные методы. К тому же,
созданный налету программно, объект единожды проходит процедуру компиляции перед загрузкой, что, по сравнению
с интерпретатором FoxPro, ускоряет выполнение кода. FoxPro каждый раз производит интерпретацию кода для
выполнения.
     Для реализации объектно ориентированнности я использую функцию "ЗагрузитьСценарий()", но перед этим
программно формирую файл сценария. Если в этом сценарии пишу "Перем Моя экспорт", то это общедоступная
переменная, а если тоже самое пишу без слова "экспорт", то приватная. Если в сценарий вставляю строку
"Функция Мояфункция() экспорт Возврат 2*2; КонецФункции", то это общедоступная функция, а если без
слова "экспорт", то приватная. Создание файла, для которого я придумал расширение "osm", так как это
внешний модуль и его подключение через функцию "ЗагрузитьСценарий", я реализовал в одной функции,
которую назвал "СоздатьООПОбъект" (см.библиотеку UfaScript).  
   Все это заработало, но кроме этого надо реализовать механизм наследования объектов, желательно
реализовать особую функцию "конструктор", в которой можно инициализировать переменные объекта. 
Для реализации конструктора достаточно в короткой функции "СоздатьООПОбъект" реализовать автозапуск
функции с ключевым именем "конструктор". А для наследования пришлось сначала написать спец функцию
"СоздатьНаследникаООПОбъекта", но так как список описания переменных и функций для объекта я реализовывал
в виде строкового массива, то понял, что удобнее производить сборку итогового массива из двух при
реализации механизма наследования, а массивы с перечнем переменных и функций называть образами объекта.
Потому от функции "СоздатьНаследникаООПОбъекта" я отказался, заменив ее функцией "СоздатьООПОбъектИзМассива",
благодаря которой я могу создать массив для объекта из цепочек массивов родителей. 
   Я реализовал, чтоб базовые переменные "ИмяОбъекта" - строковое имя объекта, "Родитель" - строковое имя
родителя объекта, "UfaScript" - указатель на библиотеку "UfaScript", "НашОбъект" - указатель на созданный
объект, вставлялись автоматически при использовании функции "СоздатьООПОбъект". Затем создал образ объекта
"ОбразОбъектБазовый", в котором еще предопределил переменные "Экран" - указатель на экран, куда вставляется
объект  (экран - это указать на обычный массив с объектами, которые надо изобразить на экране), "Индекс" -
указатель на порядковый номер объекта в массиве Экран, "ТипОбъекта" - просто номер типа, чтоб определять
возможности объекта.     
    Затем начал создавать образы нужных объектов в виде функций, заполняющих массивы строк родительскими 
переменными и методами, а так же добавляющими строки с переменными и методами текущего объекта. При создании
нового итогового массива для объекта таким слиянием массивов, я произвожу сортировку, чтоб записи с 
ключевым словом "Перем " были вначале.
    Но этого механизма недостаточно, так как нужно еще обеспечить переопределение методов в объектах потомках.
Для реализации всех возможностей нужного мне переопределения, я понял, что достаточно двух управляющих команд:
"#Удалить" и "#Переименовать". Первая удаляет ненужный метод у родителя, а вторая переименовывает метод. Теперь
у программиста появилась возможность удалить любой метод в массиве родителя и затем, если надо, определить 
новый метод с таким же именем. Так же благодаря возможности переименовать любой метод, можно в любом месте 
тела функции нового метода вызывать старый переименованный метод родителя. 
    Все вышесказанное позволяет создавать полноценные объекты на OneScript и заявить, что теперь OneScript
является объектно ориентированным языком программирования. 
    Дополнительно, в качестве бонуса, для тех кто дочитал до конца данную статью, я расскажу, как я реализовал
механизм передачи функции в качестве параметра в OneScript.  
    Механизм передачи функции в виде параметра реализован двуми короткими функциями: "ВызватьФункцию(Функ,Где)",
где параметр "функ" - это строка с текстом вызова функции, а параметр "где" - это указатель на модуль, в 
котором располагается вызываемая функция, "ВыполнитьКодИзМассива" - которая исполняет созданный код и возвращает
результат выполнения через метод "Результат". В итоге передача функции в качестве параметра будет выглядеть
так:
         Сообщить("12) "+U.ВызватьФункцию("Итог(7)",ЭтотОбъект).Результат());
Как видно, из текста в функцию можно передавать любые параметры, но, возможно, придется писать так:
         Сообщить("12) "+U.ВызватьФункцию("Итог("+Парам+")",ЭтотОбъект).Результат());
Потому что вызов данной функции будет происходить во внешнем модуле, созданном программно. А можно так:
         Сообщить("12) "+U.ВызватьФункцию("Итог(ТотОбъект.Парам)",ЭтотОбъект).Результат());
Это возможно, так как в указатель "ТотОбъект" попадает ссылка на "ЭтотОбъект" с вызывающего модуля. Этот 
вызов лучше, так как позволит передать функции указатель на массив или другой объект.
     Теперь можно сказать, что OneScript - это не только объектно-ориентированный язык программирования, но
так же язык, который поддерживает передачу функций в качестве параметра. Все это открывается большие возможности
для программистов на OneScript. По сути, OneScript теперь - это уникальный язык программирования, который
является гибридом интерпретатора с компилятором, тот язык, который я давно искал для реализации своих идей.
Он позволяет легко менять код программно, по ходу выполнения программы. Польза от этого несомненна.
Не все пока понимают потенциал данного проекта. И возможно, что сам автор проекта OneScript не понимает этого. 
Кроме того, OneScript - это руссифицированный язык, который, на мой взгляд, должен стать стандартом для 
преподавания в нашей стране вместо устаревшего языка программирования "Паскаль", так как он более легок для
освоения и обладает большими возможностями, к тому же реализован в стил)е популярного языка програмирования 1С.
    Свою библиотеку UfaScript и примеры ее использования я выкладываю на ...    Пользуйтесь хорошим и сами 
создавайте лучше, так как данные идеи можно реализовать иначе и, возможно, более эффективно. Конкуренция идей
способствует развитию.

    16.04.2017    Ошнуров Андрей Михайлович   г.Уфа
	
 
2) Описание объектов в UfaScript
   =======================================
     Все визуальные объекты имеют метод Нарисовать() и регистрируются в глобальном массиве Экран методом
	 РегистрацияНаЭкране().  Для обновления экрана вызывается процедура ОбновитьЭкранОбъектов(), которая 
	 вызывает у всех не скрытых объектов метод Нарисовать(). У активных объектов имеется метод Действие(),
     который вызывается при нажатии Enter. Для удобства объекты создаются соответствующими функциями.
     Объект группы может содержать в себе другие активные и пассивные объекты. Пассивные объекты не
     реагируют на клавиши, а только отображаются на экран методом Нарисовать(). Метод Нарисовать() группы
     вызывает последовательно все методы нарисовать активных и пассивных объектов зарегистрированных в
     группе. Метод Действие() группы вызывает метод Действие() одного на данный момент активного объекта
     из зарегистрированных активных объектов. Горизонтальная группа меняет последовательно активный элемент
     из списка зарегистрированных в группе активных элементов по нажатию клавиш вправо-влево, а вертикальная
     группа - по нажатию клавиш вверх-вниз. 	 

   01) Предопределенные переменные (имеются у всех объектов): ИмяОбъекта экспорт, Родитель (Экспорт), 
        UfaScript (э) - указатель на модуль с библиотекой, НашОбъект (э) - Указатель на текущий объект, 
		ГлМодуль - Указатель на модуль из которого создан объект. 		
   
   02) Базовый - Является родителем всех объектов. Перем Экран (Э) - указатель на массив экрана, в массиве
    зарегистрированы все объекты экрана (Для перерисовки всех зарегистрированных на экране объектов вызывайте 
    ОбновитьЭкранОбъектов()); Индекс (Э) - номер (индекс) в массиве Экрана, ТипОбъекта (Э), Скрытый (э) - 
	Объект не удаляется, а получает свойство скрытый=Истина, тогда при обновлении экрана ОбновитьЭкранОбъектов() 
	не отображается. Это удобно для модальных окон, так как при их закрытии достаточно поставить скрытый=истина и
    обновить экран, затем при открытии установить скрытый=Ложь и вызвать метод Нарисовать()
       Методы: РегистрацияНаЭкране - добавляется текущий объект в массив экрана.
	   
	03) ОбъектЭкрана (потомок объекта Базовый) - текстовая строка на экране. 
        Переменные Y (э), X (э) - координаты левого верхнего угла,  Текст (э) - строка текста, отборажаемая 
      объектом, ЦветФона (Э), ЦветТекста. 
     	Методы Конструктор() (э) - Вызывается автоматически при создании. 
 	    Нарисовать() (э) - выводит переменную Текст на консоль.
		
		Создание объекта "ОбъектЭкрана": функция СоздатьСтрокуТекста(Y1,X1,Текст1,ЦФ,ЦТ,Имя,U) - Y1,X1 - координаты
	левого края объекта, Текст1 - выводимый на экран текст, ЦФ - Цвет фона, ЦТ - Цвет текста, Имя - ИмяОбъекта
    (можно пустая строка), U - Ссылка на модуль, в котором создан объект (записывается в свойство ГлМодуль)	
	
	04) СтрокаВыбора (потомок ОбъектЭкрана) - вертикально расположенные строки, при нажатии Enter вызывается
    метод Действие().
       Переменные Функц - Строка с именем функции вызываемой при нажатии в методе Действие().
       Методы:  РегистрацияДанных (э) - инициализация переменных и регистрация на экране.
       	   Действие (э) - метод вызываемый по нажатию Enter на данном объекте.
		   
		   Создание объекта СоздатьСтрокиВыбора(Y,X,М,T,"ИмяФункции",U) - Y,X - Координаты, М - массив строк,
		Т - Текст заголовка списка (по ширине данной строки определяется ширина объекта, высота определяется по
		количеству строк в массиве), "ИмяФункции" - только строковое имя функции, которая должна быть в модуле
        где создан объект и иметь вид ИмяФункции(Перем), где в параметр Перем будет записываться номер активной
		строки, при нажатии клавиши Enter. U - Указатель на модуль где создается объект (как правило ЭтотОбъект).
		Фактически процедурой создаются и регистрируются на экране два объекта: объект прямоугольник, создающий 
		рамку и группа с активными строками при нажатии на Enter в выбранной строке вызывается функция имя
        которой указано в параметре "ИмяФункции".		

    05) Прямоугольник (потомок ОбъектЭкрана) - прорисовывает строки переданного массива по заданным координатам.
          Перем МассивТекста (э) - указатель на массив со строками. 
		  Методы:   Нарисовать() - перерисовывает все строки на экране из МассивТекста
		  РегистрацияДанных() - Регистрация на экране
		  
		  Создание объекта СоздатьПрямоугольник(Y,X,Имя,U,МТ)   Y,X - координата левого верхнего угла объекта,
	Имя - имя объекта (может быть пустой строкой), U - указатель на текущий модуль (как правило ЭтотОбъект),
    МТ - массив отображаемых строк текста.

    06)  Кнопка (потомок Прямоугольник)	- Рисует кнопку на экране. 
	     Перем Функц - Строка с функцией, которая вызывается в методе Действие()
		 Метод Действие() - Отрабативается при нажатии Enter активной кнопки.
	
        Создание объекта: СоздатьКнопку(Y,X,Имя,ФД,U,МТ) - Y,X - Координаты, Имя - Имя Объекта, 
		ФД - Функция вызываемая при нажатии Enter, U - указатель на модуль где создается объект,
        МТ - Массив текстовых строк рисующих кнопку с текстом

    07) Группы (потомок объект Базовый) - содержит группу объектов с методами Нарисовать() и Действие().
	   Переменные АктивГруппы (Э) - массив активных объектов (реагирующих на клавиши) зарегистрированных в 
	   группе, АктивИндекс (э) - номер активного в данный момент объекта, АктивЦветФона (э) - Цвет фона 
	   активного объекта, ЦветФона - цвет  фона не активного объекта. ПассивГруппы (Э) - массив пассивных
	   объектов (не реагирующих на клавиши, но отображаемые, например рамка окна группы)
	   Все добавленные объекты должны иметь методы Нарисовать() и Действие(), а так же свойство "Скрытый".
	   Методы: Конструктор() (Э)- инициализирует переменные, вызывается автоматически при создании
	   ДобавитьЭлементВГруппу(Об) (Э) - Добавляет объект "Об" в группу.
	   ДобавитьПассивныйЭлементВГруппу(Об) (Э) - Добавляет пассивный объект "Об" в группу .
	   АктивироватьЭлемент(Инд) (Э) - Активным может быть только один из объектов. Активирует объект с номером 
	   "Инд", если Инд=-1 то только деактивирует активный.
	   Нарисовать() (Э) - вызывает последоватьно функции Нарисовать() у всех зарегистрированных в группе объектов
	   ОбработатьНажатия(Клавиша) (Э) - Содержит обработчик нажатий клавиш для данной группы.

       ГруппыГоризонт (потомок объекта Группы)  - аналог объекта Группы, но перемещение между объектами по клавишам 
	   вправо-влево. 	   
	
	   Создание объекта: СоздатьГруппуОбъектов(Тип,U) - Создает объект "группа объектов", тип = 1 - создает 
	   вертикальную группу объектов (перемещение по клавишам вверх-вниз), тип = 2 - создает горизонтальную
	   группу объектов (перемещение по клавишам вправо-влево). U - указатель на модуль, в котором создан
	   объект (как правило  ЭтотОбъект)
	   
	   19.04.2017
	   
	   

          		  
	
	